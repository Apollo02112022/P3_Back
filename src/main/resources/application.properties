# Informations sur la BDD à exploiter
# ajouter "?serverTimezone=GMT" à l'url est obligatoire pour MySQL 5
spring.datasource.url=jdbc:mysql://localhost:3306/barter?createDatabaseIfNotExist=true&serverTimezone=GMT
spring.datasource.username=5p3
spring.datasource.password=power@P3

# Autoriser l'affichage des requêtes SQL faites par Hibernate
spring.jpa.show-sql=true

# Gérer Hibernate
spring.jpa.hibernate.ddl-auto=update

# ATTENTION : cette propriété est optionnelle et il peut être "risqué" de l'activer. Spring Boot va crasher au démarrage si la classe de dialecte spécifiée n'est pas disponible ==> pour vérifier quelle classe est disponible pour vous, cherchez le JAR d'hibernate-core dans les dépendances de votre projet, puis regardez dans le package org.hibernate.dialect pour découvrir quelles classes de dialectes sont disponbles  
# Sélectionner un "dialecte" (syntaxe sql) permet à Hibernate de générer du SQL adapté à la version choisie
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

spring.jackson.serialization.fail-on-empty-beans=false
# Permettra à Jackson de ne pas lever d'exception si la classe sérialisée est vide (c'est-à-dire qu'elle n'a pas de propriétés). Cela peut être utile pour éviter des exceptions indésirables dans certains cas, mais cela peut également entraîner des problèmes si la classe que vous essayez de sérialiser est vide de manière inattendue, car cela pourrait masquer des erreurs dans le code.

jwt.secret=javainuse


# spring.security.oauth2.client.registration.github.client-id=bceaf0baf162c1b1823b
# spring.security.oauth2.client.registration.github.client-secret=7e4c95d57baebbe7ce9185d7a708fb6a51ee24ff

# spring.security.oauth2.client.registration.google.client-id=781047655004-5ai1kq3dap12cl30pcmob8qhkde662lr.apps.googleusercontent.com
# spring.security.oauth2.client.registration.google.client-secret=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